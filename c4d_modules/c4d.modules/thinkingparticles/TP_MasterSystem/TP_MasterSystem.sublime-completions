{
		"scope" : "source.pythonAPI.cinema4D",
		"completions" : [
 				{"trigger": "c4d.modules.thinkingparticles.TP_MasterSystem", "contents" : "TP_MasterSystem"},
				{"trigger": "TP_MasterSystem.AllocParticle()", "contents" : "AllocParticle()"},
				{"trigger": "TP_MasterSystem.AllocParticles(num)", "contents" : "AllocParticles(${1:num})"},
				{"trigger": "TP_MasterSystem.FreeParticle(pid)", "contents" : "FreeParticle(${1:pid})"},
				{"trigger": "TP_MasterSystem.FreeAllParticles()", "contents" : "FreeAllParticles()"},
				{"trigger": "TP_MasterSystem.AllocParticleGroup()", "contents" : "AllocParticleGroup()"},
				{"trigger": "TP_MasterSystem.FreeParticleGroup(group)", "contents" : "FreeParticleGroup(${1:group})"},
				{"trigger": "TP_MasterSystem.SetPGroupHierarchy(parent, group, mode)", "contents" : "SetPGroupHierarchy(${1:parent}, ${2:group}, ${3:mode})"},
				{"trigger": "TP_MasterSystem.GetRootGroup()", "contents" : "GetRootGroup()"},
				{"trigger": "TP_MasterSystem.GetParticleGroups(ingroup, mode[, subgroups=True])", "contents" : "GetParticleGroups(${1:ingroup}, ${2:mode} ${3:[, subgroups=True]})"},
				{"trigger": "TP_MasterSystem.GetGroupParticleCount(ingroup[, subgroups=True])", "contents" : "GetGroupParticleCount(${1:ingroup} ${2:[, subgroups=True]})"},
				{"trigger": "TP_MasterSystem.GetVirtualObjects(ingroup[, inRender=True][, subgroups=True][, hh=None])", "contents" : "GetVirtualObjects(${1:ingroup} ${2:[, inRender=True]} ${3:[, subgroups=True]} ${4:[, hh=None]})"},
				{"trigger": "TP_MasterSystem.GetGroupInfo(group)", "contents" : "GetGroupInfo(${1:group})"},
				{"trigger": "TP_MasterSystem.GetGroupFromInfo(info)", "contents" : "GetGroupFromInfo(${1:info})"},
				{"trigger": "TP_MasterSystem.UpdateGroup(group, timeDelta)", "contents" : "UpdateGroup(${1:group}, ${2:timeDelta})"},
				{"trigger": "TP_MasterSystem.NumParticles()", "contents" : "NumParticles()"},
				{"trigger": "TP_MasterSystem.Alive(pid)", "contents" : "Alive(${1:pid})"},
				{"trigger": "TP_MasterSystem.IsBorn(pid)", "contents" : "IsBorn(${1:pid})"},
				{"trigger": "TP_MasterSystem.IsDie(pid)", "contents" : "IsDie(${1:pid})"},
				{"trigger": "TP_MasterSystem.EntersGroup(pid)", "contents" : "EntersGroup(${1:pid})"},
				{"trigger": "TP_MasterSystem.Group(pid)", "contents" : "Group(${1:pid})"},
				{"trigger": "TP_MasterSystem.Position(pid)", "contents" : "Position(${1:pid})"},
				{"trigger": "TP_MasterSystem.Velocity(pid)", "contents" : "Velocity(${1:pid})"},
				{"trigger": "TP_MasterSystem.Mass(pid)", "contents" : "Mass(${1:pid})"},
				{"trigger": "TP_MasterSystem.Spin(pid)", "contents" : "Spin(${1:pid})"},
				{"trigger": "TP_MasterSystem.Size(pid)", "contents" : "Size(${1:pid})"},
				{"trigger": "TP_MasterSystem.Scale(pid)", "contents" : "Scale(${1:pid})"},
				{"trigger": "TP_MasterSystem.Age(pid)", "contents" : "Age(${1:pid})"},
				{"trigger": "TP_MasterSystem.Life(pid)", "contents" : "Life(${1:pid})"},
				{"trigger": "TP_MasterSystem.Alignment(pid)", "contents" : "Alignment(${1:pid})"},
				{"trigger": "TP_MasterSystem.Randomseed(pid)", "contents" : "Randomseed(${1:pid})"},
				{"trigger": "TP_MasterSystem.Transform(pid)", "contents" : "Transform(${1:pid})"},
				{"trigger": "TP_MasterSystem.Flags(pid)", "contents" : "Flags(${1:pid})"},
				{"trigger": "TP_MasterSystem.DTFactor(pid)", "contents" : "DTFactor(${1:pid})"},
				{"trigger": "TP_MasterSystem.Color(pid)", "contents" : "Color(${1:pid})"},
				{"trigger": "TP_MasterSystem.SetPosition(pid, p)", "contents" : "SetPosition(${1:pid}, ${2:p})"},
				{"trigger": "TP_MasterSystem.SetVelocity(pid, p)", "contents" : "SetVelocity(${1:pid}, ${2:p})"},
				{"trigger": "TP_MasterSystem.SetMass(pid, mass)", "contents" : "SetMass(${1:pid}, ${2:mass})"},
				{"trigger": "TP_MasterSystem.SetSpin(pid, axis, speed)", "contents" : "SetSpin(${1:pid}, ${2:axis}, ${3:speed})"},
				{"trigger": "TP_MasterSystem.SetAge(pid, age)", "contents" : "SetAge(${1:pid}, ${2:age})"},
				{"trigger": "TP_MasterSystem.SetLife(pid, life)", "contents" : "SetLife(${1:pid}, ${2:life})"},
				{"trigger": "TP_MasterSystem.SetGroup(pid, group)", "contents" : "SetGroup(${1:pid}, ${2:group})"},
				{"trigger": "TP_MasterSystem.SetSize(pid, size)", "contents" : "SetSize(${1:pid}, ${2:size})"},
				{"trigger": "TP_MasterSystem.SetScale(pid, scale)", "contents" : "SetScale(${1:pid}, ${2:scale})"},
				{"trigger": "TP_MasterSystem.SetAlignment(pid, align)", "contents" : "SetAlignment(${1:pid}, ${2:align})"},
				{"trigger": "TP_MasterSystem.SetRandomseed(pid, seed)", "contents" : "SetRandomseed(${1:pid}, ${2:seed})"},
				{"trigger": "TP_MasterSystem.SetCollision(pid, collision)", "contents" : "SetCollision(${1:pid}, ${2:collision})"},
				{"trigger": "TP_MasterSystem.SetDTFactor(pid, dt)", "contents" : "SetDTFactor(${1:pid}, ${2:dt})"},
				{"trigger": "TP_MasterSystem.SetColor(pid, color)", "contents" : "SetColor(${1:pid}, ${2:color})"},
				{"trigger": "TP_MasterSystem.SetPData(pid, chan, value)", "contents" : "SetPData(${1:pid}, ${2:chan}, ${3:value})"},
				{"trigger": "TP_MasterSystem.GetPData(pid, chan)", "contents" : "GetPData(${1:pid}, ${2:chan})"},
				{"trigger": "TP_MasterSystem.AddDataChannel(type, str)", "contents" : "AddDataChannel(${1:type}, ${2:str})"},
				{"trigger": "TP_MasterSystem.RemoveDataChannel(chan)", "contents" : "RemoveDataChannel(${1:chan})"},
				{"trigger": "TP_MasterSystem.NumDataChannels()", "contents" : "NumDataChannels()"},
				{"trigger": "TP_MasterSystem.DataChannelType(chan)", "contents" : "DataChannelType(${1:chan})"},
				{"trigger": "TP_MasterSystem.DataChannelName(chan)", "contents" : "DataChannelName(${1:chan})"},
				{"trigger": "TP_MasterSystem.DataChannelUniqueID(chan)", "contents" : "DataChannelUniqueID(${1:chan})"},
				{"trigger": "TP_MasterSystem.DataChannelID(unique_id)", "contents" : "DataChannelID(${1:unique_id})"},
				{"trigger": "TP_MasterSystem.GetOperatorID(op)", "contents" : "GetOperatorID(${1:op})"},
				{"trigger": "TP_MasterSystem.GetDirty()", "contents" : "GetDirty()"},
				{"trigger": "TP_MasterSystem.SetDirty()", "contents" : "SetDirty()"},
  				{ "trigger": "____zdummy", "contents": "_____zdummy" } 
		]
}